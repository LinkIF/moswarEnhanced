// MosWar 6k - –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ú–æ—Å–∫–æ–≤—Å–∫–∏—Ö –í–æ–π–Ω
// –ß–∞—Å—Ç—å 4/7

    /**
     * –ê–≤—Ç–æ–ø–∏–ª–æ—Ç - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
     */
    async function autoPilot() {
      try {
        console.log("[AutoPilot] Starting automated tasks");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        await checkAndRestoreHealth();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–≥—Ä —É –¶—ã–≥–∞–Ω–∫–∏
        await playGypsy();
        
        // –ü—Ä–æ–±—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–¥–∏–æ –°–∏—Ç–∏-FM
        await signUpForSiri();
        
        // –ü—Ä–æ–±—É–µ–º –æ–±–º–µ–Ω—è—Ç—å —Ç–æ–∫–µ–Ω—ã –°–∏—Ç–∏-FM
        await tradeAllSiri();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤ –ø–æ–¥–∑–µ–º–∫–µ
        await dungeonSpeedUp();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å–∫–æ—Ä–µ–Ω–∏—è –Ω–∞ –ü–æ–ª–µ –ß—É–¥–µ—Å
        await kubovichSpeedUp();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∞ –±–æ—è —Å –ù–µ—Ñ—Ç—å –õ–µ–Ω–∏–Ω–æ–º
        await neftLeninSkipFight();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ—Ç–∞–ª–µ–π –±—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç–∞
        await checkBronikPieces();
        
        // –ü—Ä–æ–±—É–µ–º –±—É—Å—Ç –∫–ª–∞–Ω–∞
        await boostClan();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        await patrolMode();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—Ç—É –≤ –º–µ—Ç—Ä–æ
        await metroWorkMode();
        
        updateStatus("ü§ñ –í—ã–ø–æ–ª–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏");
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–∏–ª–æ—Ç —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å
        setTimeout(autoPilot, 60 * 60 * 1000);
      } catch (error) {
        console.error("Error in autoPilot:", error);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        setTimeout(autoPilot, 10 * 60 * 1000);
      }
    }
    
    /**
     * –°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
     * @param {string} slotId - ID —Å–ª–æ—Ç–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
     */
    async function undressItem(slotId = "hat") {
      try {
        console.log(`[Undress] Removing item from slot ${slotId}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        await fetch("https://www.moswar.ru/player/", {
          method: "POST",
          headers: {
            "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
            "X-Requested-With": "XMLHttpRequest"
          },
          body: `action=undress_${slotId}&undress=${slotId}&__ajax=1&return_url=%2Fplayer%2F`,
          credentials: "include"
        });
        
        console.log(`[Undress] Item removed from slot ${slotId}`);
        updateStatus(`üëï –°–Ω—è—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ª–æ—Ç–∞ ${slotId}`);
      } catch (error) {
        console.error(`Error undressing item from slot ${slotId}:`, error);
      }
    }
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º–∞—à–∏–Ω—ã –≤ –≥–∞—Ä–∞–∂–µ
    var BANNED_CARS = ["vergil"];
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π –º–∞—à–∏–Ω
    var EXCEPTION_CARS = ["eclipse", "–±–µ–Ω—Ç–ª–∏", "–º–æ—Ç–æ—Ü–∏–∫–ª", "–ø—Ä–µ–º–∏—É–º"];
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø–æ–µ–∑–¥–æ–∫ –Ω–∞ —Å–∞–º–æ–ª–µ—Ç–∞—Ö –∏ –ª–æ–¥–∫–∞—Ö
    var PLANES_AND_BOATS_RIDES_IDS = {
      boats: ["7", "8", "9", "10"],
      planes: ["3", "4", "5", "6"]
    };
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π —Ç–∏–ø–æ–≤ –ø–æ–µ–∑–¥–æ–∫ –Ω–∞ —Å–∞–º–æ–ª–µ—Ç–∞—Ö –∏ –ª–æ–¥–∫–∞—Ö
    var EXCEPTION_PLANES_AND_BOATS_RIDES_IDS = [];
    
    // HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
    var HEADERS = {
      accept: "*/*",
      "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
      "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
      "sec-fetch-dest": "empty",
      "sec-fetch-mode": "cors",
      "sec-fetch-site": "same-origin",
      "x-requested-with": "XMLHttpRequest"
    };
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
     */
    async function sendTransport() {
      try {
        console.log("[Transport] Sending selected transport");
        
        const transportForm = document.getElementById("carstripselector");
        if (!transportForm) {
          console.error("[Transport] Transport form not found");
          return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã
        const selectedTransport = document.querySelectorAll(".cars-trip-choose input[type='checkbox']:checked");
        if (!selectedTransport.length) {
          console.error("[Transport] No transport selected");
          updateStatus("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –º–∞—à–∏–Ω—ã", true);
          return;
        }
        
        console.log(`[Transport] Sending ${selectedTransport.length} vehicles`);
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        const formData = new FormData(transportForm);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º FormData –≤ —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞
        const body = new URLSearchParams(formData).toString() + "&action=send&__ajax=1&return_url=%2Fautomobile%2F";
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        const response = await fetch("https://www.moswar.ru/automobile/", {
          method: "POST",
          headers: {
            ...HEADERS,
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8"
          },
          body,
          credentials: "include"
        });
        
        const result = await response.json();
        
        if (result.success) {
          console.log(`[Transport] ${selectedTransport.length} vehicles sent successfully`);
          updateStatus(`üöó –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${selectedTransport.length} –µ–¥. —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞`);
        } else {
          console.error("[Transport] Failed to send transport:", result.error || "Unknown error");
          updateStatus("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", true);
        }
      } catch (error) {
        console.error("Error sending transport:", error);
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", true);
      }
    }
    
    /**
     * –†–∏—Å—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    function renderPanel() {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–∞–Ω–µ–ª—å
        if (document.getElementById("mw-panel")) {
          return;
        }
        
        console.log("[UI] Rendering control panel");
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å
        const panel = document.createElement("div");
        panel.id = "mw-panel";
        panel.innerHTML = `
          <h3 style="margin-top: 0;">MosWar 6k</h3>
          
          <div id="mw-sets-summary"></div>
          
          <div class="mw-buttons-row">
            <button class="mw-btn" id="mw-patrol">üöî –ü–∞—Ç—Ä—É–ª—å</button>
            <button class="mw-btn" id="mw-metro">üöá –ú–µ—Ç—Ä–æ</button>
            <button class="mw-btn" id="mw-farm">üëä –§–∞—Ä–º</button>
            <button class="mw-btn" id="mw-tv">üì∫ –¢–í</button>
            <div class="mw-divider"></div>
            <button class="mw-btn" id="mw-fill-all">‚õΩ –ó–∞–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ</button>
            <button class="mw-btn" id="mw-save-set">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç</button>
            <button class="mw-btn" id="mw-autopilot">ü§ñ –ê–≤—Ç–æ–ø–∏–ª–æ—Ç</button>
          </div>
          
          <div class="mw-status-line">
            <span id="mw-active-set">–ö–æ–º–ø–ª–µ–∫—Ç 1</span>
            <span style="margin-left: 20px;" id="mw-status">–û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π...</span>
          </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.body.insertBefore(panel, document.body.firstChild);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞
        updateSetIndicator();
        
        // –†–∏—Å—É–µ–º —Å–≤–æ–¥–∫—É –ø–æ –∫–æ–º–ø–ª–µ–∫—Ç–∞–º
        drawSetSummary();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        document.getElementById("mw-patrol").addEventListener("click", () => patrolMode());
        document.getElementById("mw-metro").addEventListener("click", () => metroWorkMode());
        document.getElementById("mw-farm").addEventListener("click", () => fightMode());
        document.getElementById("mw-tv").addEventListener("click", () => watchTv());
        document.getElementById("mw-fill-all").addEventListener("click", () => fillAllCars());
        document.getElementById("mw-save-set").addEventListener("click", () => saveSetModal());
        document.getElementById("mw-autopilot").addEventListener("click", () => autoPilot());
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Ç–∞–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        if (window.location.href.includes("moswar.ru/automobile/")) {
          addTransportControls();
        }
        
        console.log("[UI] Control panel rendered");
      } catch (error) {
        console.error("Error rendering panel:", error);
      }
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
     */
    function addTransportControls() {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if (document.getElementById("mw-transport-controls")) {
          return;
        }
        
        console.log("[UI] Adding transport controls");
        
        // –ù–∞—Ö–æ–¥–∏–º —Ñ–æ—Ä–º—É –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        const transportForm = document.getElementById("carstripselector");
        if (!transportForm) {
          return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
        const controls = document.createElement("div");
        controls.id = "mw-transport-controls";
        controls.style.cssText = `
          margin: 15px 0;
          padding: 10px;
          background: #fff8e1;
          border: 2px solid #ffcc80;
          border-radius: 8px;
        `;
        
        // –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞
        const selectContainer = document.createElement("div");
        selectContainer.className = "mw-select-container";
        selectContainer.style.cssText = `
          margin-bottom: 10px;
          display: flex;
          align-items: center;
        `;
        
        const selectLabel = document.createElement("label");
        selectLabel.textContent = "–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç:";
        selectLabel.style.marginRight = "10px";
        
        const select = document.createElement("select");
        select.id = "mw-active-slot-select";
        select.className = "mw-select";
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞
        for (let i = 1; i <= 4; i++) {
          const setStr = localStorage.getItem(`mw-carset-${i}`);
          const setData = setStr ? JSON.parse(setStr) : [];
          
          const option = document.createElement("option");
          option.value = i;
          option.textContent = `–ö–æ–º–ø–ª–µ–∫—Ç ${i} (${setData.length})`;
          select.appendChild(option);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç
        const lastSetUsed = localStorage.getItem("mw-last-set-used") || "1";
        select.value = lastSetUsed;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Ç–∞
        select.addEventListener("change", function() {
          localStorage.setItem("mw-last-set-used", this.value);
          updateSetIndicator();
        });
        
        selectContainer.appendChild(selectLabel);
        selectContainer.appendChild(select);
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        const buttonsContainer = document.createElement("div");
        buttonsContainer.style.cssText = `
          display: flex;
          flex-wrap: wrap;
          gap: 8px;
          margin-top: 10px;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const saveButton = createButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", () => saveSetModal(), "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä –∫–∞–∫ –∫–æ–º–ø–ª–µ–∫—Ç");
        const sendButton = createButton("‚úàÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å", () => sendTransport(), "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç");
        const fillAllButton = createButton("‚õΩ –ó–∞–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ", () => fillAllCars(), "–ó–∞–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç");
        const loadSetButton = createButton("üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç", () => {
          const activeSlot = parseInt(document.getElementById("mw-active-slot-select").value, 10);
          sendSet(activeSlot);
        }, "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç");
        
        buttonsContainer.appendChild(saveButton);
        buttonsContainer.appendChild(sendButton);
        buttonsContainer.appendChild(fillAllButton);
        buttonsContainer.appendChild(loadSetButton);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-–±–∞—Ä –¥–ª—è –ø–æ–µ–∑–¥–æ–∫
        const statusBar = document.createElement("div");
        statusBar.id = "mw-transport-status";
        statusBar.className = "mw-status-line";
        statusBar.textContent = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º";
        statusBar.style.cssText = `
          margin-top: 15px;
          padding: 5px;
          background: #f5f5f5;
          border-radius: 5px;
          border-left: 3px solid #ffcc80;
          font-style: italic;
        `;
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–º–µ—Å—Ç–µ
        controls.appendChild(selectContainer);
        controls.appendChild(buttonsContainer);
        controls.appendChild(statusBar);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–æ–π
        transportForm.parentNode.insertBefore(controls, transportForm);
        
        console.log("[UI] Transport controls added");
      } catch (error) {
        console.error("Error adding transport controls:", error);
      }
    }
    
    /**
     * –†–∏—Å—É–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –±–æ–µ–≤
     */
    function renderNavbar() {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±–æ—è
        if (!window.location.href.includes("/fight/")) {
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        if (document.getElementById("mw-fight-navbar")) {
          return;
        }
        
        console.log("[UI] Rendering fight navbar");
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å
        const navbar = document.createElement("div");
        navbar.id = "mw-fight-navbar";
        navbar.style.cssText = `
          position: fixed;
          top: 10px;
          left: 50%;
          transform: translateX(-50%);
          background: rgba(0, 0, 0, 0.8);
          border-radius: 15px;
          padding: 10px 15px;
          display: flex;
          gap: 10px;
          z-index: 1000;
          box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        `;
        
        navbar.innerHTML = `
          <button class="mw-btn" id="mw-fight-attack">‚öîÔ∏è –ê—Ç–∞–∫–∞</button>
          <button class="mw-btn" id="mw-fight-defense">üõ°Ô∏è –ó–∞—â–∏—Ç–∞</button>
          <button class="mw-btn" id="mw-fight-leave">üö™ –í—ã—Ö–æ–¥</button>
          <button class="mw-btn" id="mw-fight-refresh">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.body.appendChild(navbar);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        document.getElementById("mw-fight-attack").addEventListener("click", () => makeTurn(false));
        document.getElementById("mw-fight-defense").addEventListener("click", () => makeTurn(true));
        document.getElementById("mw-fight-leave").addEventListener("click", () => {
          window.location.href = "https://www.moswar.ru/alley/";
        });
        document.getElementById("mw-fight-refresh").addEventListener("click", () => {
          window.location.reload();
        });
        
        console.log("[UI] Fight navbar rendered");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –ª–æ–≥–∞–º–∏ –±–æ—è
        const logsContainer = document.getElementById("fightlogs");
        if (logsContainer) {
          setupLogsObserver(logsContainer);
        }
      } catch (error) {
        console.error("Error rendering navbar:", error);
      }
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –ª–æ–≥–∏ –±–æ—è –æ—Ç –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     */
    function cleanupFightLogs() {
      try {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ª–æ–≥–∏ –±–æ—è
        const logs = document.querySelectorAll("#fightlogs .block-rounded");
        if (!logs.length) {
          return;
        }
        
        console.log(`[Fight] Cleaning up ${logs.length} fight logs`);
        
        for (const log of logs) {
          // –ò—â–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–¥–∞—Ä—ã –∏ –ø—Ä–æ–º–∞—Ö–∏
          const criticalHit = log.innerText.includes("–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä");
          const miss = log.innerText.includes("–ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è") || log.innerText.includes("–ø—Ä–æ–º–∞—Ö–Ω—É–ª–∞—Å—å");
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ª–æ–≥–∞
          if (criticalHit) {
            log.style.backgroundColor = "rgba(255, 215, 0, 0.1)";
            log.style.borderLeft = "3px solid gold";
          } else if (miss) {
            log.style.opacity = "0.6";
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –ª–æ–≥–∞
          const collapseButton = document.createElement("div");
          collapseButton.style.cssText = `
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(0,0,0,0.2);
            color: white;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 14px;
          `;
          collapseButton.innerText = "-";
          
          // –î–µ–ª–∞–µ–º –ª–æ–≥ —Å–∫—Ä—ã–≤–∞–µ–º—ã–º
          log.style.position = "relative";
          log.style.transition = "height 0.2s ease";
          
          collapseButton.addEventListener("click", () => {
            if (log.dataset.collapsed === "true") {
              log.style.height = log.dataset.originalHeight;
              log.dataset.collapsed = "false";
              collapseButton.innerText = "-";
            } else {
              log.dataset.originalHeight = log.style.height || `${log.offsetHeight}px`;
              log.style.height = "30px";
              log.style.overflow = "hidden";
              log.dataset.collapsed = "true";
              collapseButton.innerText = "+";
            }
          });
          
          log.appendChild(collapseButton);
        }
      } catch (error) {
        console.error("Error cleaning up fight logs:", error);
      }
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –¥–æ –∫–æ–Ω—Ñ–µ—Ç—ã
     */
    function renderCandyCountdown() {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å—á–µ—Ç—á–∏–∫
        if (document.getElementById("mw-candy-countdown")) {
          return;
        }
        
        console.log("[UI] Rendering candy countdown");
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–Ω—Ñ–µ—Ç—ã
        const candyTimerElement = document.querySelector(".candy-timer");
        if (!candyTimerElement) {
          return;
        }
        
        const timerValue = candyTimerElement.getAttribute("timer");
        if (!timerValue) {
          return;
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        const countdown = document.createElement("div");
        countdown.id = "mw-candy-countdown";
        countdown.style.cssText = `
          position: fixed;
          bottom: 10px;
          right: 10px;
          background: rgba(0, 0, 0, 0.7);
          color: white;
          padding: 8px 12px;
          border-radius: 20px;
          font-size: 12px;
          z-index: 1000;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.body.appendChild(countdown);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        let remainingTime = parseInt(timerValue, 10);
        
        function updateCountdown() {
          if (remainingTime <= 0) {
            countdown.innerHTML = "üç¨ –ö–æ–Ω—Ñ–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!";
            countdown.style.backgroundColor = "rgba(76, 175, 80, 0.7)";
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            showNotification("üç¨ –ö–æ–Ω—Ñ–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞!");
            return;
          }
          
          const hours = Math.floor(remainingTime / 3600);
          const minutes = Math.floor((remainingTime % 3600) / 60);
          const seconds = remainingTime % 60;
          
          countdown.innerHTML = `üç¨ ${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
          
          remainingTime--;
          setTimeout(updateCountdown, 1000);
        }
        
        updateCountdown();
        
        console.log("[UI] Candy countdown rendered");
      } catch (error) {
        console.error("Error rendering candy countdown:", error);
      }
    }
    
    /**
     * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏
     * @param {HTMLElement} button - –ö–Ω–æ–ø–∫–∞, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–¥—Å–∫–∞–∑–∫–∞
     * @param {string} text - –¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
     */
    function createPopover(button, text) {
      try {
        if (!button || !text) {
          return;
        }
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
        const popover = document.createElement("div");
        popover.classList.add("mw-popover");
        popover.style.cssText = `
          position: absolute;
          background: rgba(0, 0, 0, 0.8);
          color: white;
          padding: 8px 12px;
          border-radius: 5px;
          font-size: 12px;
          z-index: 1001;
          max-width: 200px;
          visibility: hidden;
          opacity: 0;
          transition: opacity 0.2s, visibility 0.2s;
          pointer-events: none;
        `;
        popover.innerText = text;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.body.appendChild(popover);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
        button.addEventListener("mouseenter", () => {
          const rect = button.getBoundingClientRect();
          popover.style.visibility = "visible";
          popover.style.opacity = "1";
          
          // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞–¥ –∫–Ω–æ–ø–∫–æ–π
          popover.style.left = `${rect.left + rect.width / 2 - popover.offsetWidth / 2}px`;
          popover.style.top = `${rect.top - popover.offsetHeight - 5}px`;
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ —É—Ö–æ–¥–µ —Å –∫–Ω–æ–ø–∫–∏
        button.addEventListener("mouseleave", () => {
          popover.style.visibility = "hidden";
          popover.style.opacity = "0";
        });
      } catch (error) {
        console.error("Error creating popover:", error);
      }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
     * @param {string} text - –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
     * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è
     * @param {string} tooltip - –¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     * @returns {HTMLElement} –°–æ–∑–¥–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
     */
    function createButton(text, callback, tooltip = "") {
      try {
        const button = document.createElement("button");
        button.className = "mw-btn";
        button.innerText = text;
        
        if (callback && typeof callback === "function") {
          button.addEventListener("click", callback);
        }
        
        if (tooltip) {
          createPopover(button, tooltip);
        }
        
        return button;
      } catch (error) {
        console.error("Error creating button:", error);
        return document.createElement("button");
      }
    }