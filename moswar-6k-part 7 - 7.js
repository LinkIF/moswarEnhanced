// MosWar 6k - –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ú–æ—Å–∫–æ–≤—Å–∫–∏—Ö –í–æ–π–Ω
// –ß–∞—Å—Ç—å 7/7 (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è)

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –ª–æ–≥–∞–º–∏ –±–æ—è
     */
    function addCombatLogObserver() {
      try {
        console.log("[Combat] Adding combat log observer");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±–æ—è
        if (!window.location.href.includes("/fight/")) {
          return;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ª–æ–≥–æ–≤
        const logsContainer = document.getElementById("fightlogs");
        if (!logsContainer) {
          console.log("[Combat] Logs container not found");
          return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏
        const controlPanel = document.createElement("div");
        controlPanel.className = "combat-log-controls";
        controlPanel.style.cssText = `
          position: fixed;
          top: 60px;
          left: 50%;
          transform: translateX(-50%);
          background: rgba(0, 0, 0, 0.7);
          border-radius: 20px;
          padding: 5px 15px;
          display: flex;
          gap: 10px;
          z-index: 1000;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const collapseButton = createButton("üîç –°–≤–µ—Ä–Ω—É—Ç—å", () => {
          const logs = document.querySelectorAll("#fightlogs .block-rounded");
          logs.forEach(log => {
            if (!log.dataset.originalHeight) {
              log.dataset.originalHeight = log.style.height || `${log.offsetHeight}px`;
            }
            log.style.height = "30px";
            log.style.overflow = "hidden";
            log.dataset.collapsed = "true";
          });
        }, "–°–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –ª–æ–≥–∏");
        
        const expandButton = createButton("üîé –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å", () => {
          const logs = document.querySelectorAll("#fightlogs .block-rounded");
          logs.forEach(log => {
            if (log.dataset.originalHeight) {
              log.style.height = log.dataset.originalHeight;
            } else {
              log.style.height = "auto";
            }
            log.style.overflow = "";
            log.dataset.collapsed = "false";
          });
        }, "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ –ª–æ–≥–∏");
        
        const clearButton = createButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å", () => {
          const logs = document.querySelectorAll("#fightlogs .block-rounded:not(.important)");
          logs.forEach(log => {
            log.style.display = "none";
          });
        }, "–°–∫—Ä—ã—Ç—å –Ω–µ–≤–∞–∂–Ω—ã–µ –ª–æ–≥–∏");
        
        const refreshButton = createButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", () => {
          window.location.reload();
        }, "–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É");
        
        controlPanel.appendChild(collapseButton);
        controlPanel.appendChild(expandButton);
        controlPanel.appendChild(clearButton);
        controlPanel.appendChild(refreshButton);
        
        document.body.appendChild(controlPanel);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –ª–æ–≥–∞–º–∏
        setupLogsObserver(logsContainer);
        
        console.log("[Combat] Combat log observer added");
      } catch (error) {
        console.error("Error adding combat log observer:", error);
      }
    }
    
    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—é
     */
    function autoCombat() {
      try {
        console.log("[Combat] Checking for automatic combat action");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–≤—Ç–æ-–±–æ–π
        if (loadSetting("autoFight", false) !== true) {
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±–æ—è
        if (!window.location.href.includes("/fight/")) {
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—à –ª–∏ —Ö–æ–¥
        const turnIndicator = document.querySelector("#fightcontrol .block-rounded .present");
        if (!turnIndicator || !turnIndicator.innerText.includes("–í–∞—à —Ö–æ–¥")) {
          console.log("[Combat] Not player's turn");
          return;
        }
        
        console.log("[Combat] It's player's turn, making automatic action");
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—à–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        const playerHealth = document.querySelector(".fighter2 .percent");
        if (!playerHealth) {
          console.log("[Combat] Could not find player's health");
          return;
        }
        
        const healthPercent = parseInt(playerHealth.style.width, 10);
        
        // –†–µ—à–∞–µ–º, –∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
        let useDefense = false;
        
        // –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –º–µ–Ω—å—à–µ 30%, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—â–∏—Ç—É
        if (healthPercent < 30) {
          useDefense = true;
        }
        
        // –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –±–æ–ª—å—à–µ 30%, –Ω–æ –º–µ–Ω—å—à–µ 50%, —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 50% –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—â–∏—Ç—É
        else if (healthPercent < 50 && Math.random() < 0.5) {
          useDefense = true;
        }
        
        // –î–µ–ª–∞–µ–º —Ö–æ–¥
        setTimeout(() => makeTurn(useDefense), 1000 + Math.random() * 2000);
      } catch (error) {
        console.error("Error in auto combat:", error);
      }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—è
     */
    function saveCombatStats() {
      try {
        console.log("[Combat] Saving combat statistics");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±–æ—è
        if (!window.location.href.includes("/fight/")) {
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∫–æ–Ω—á–µ–Ω –ª–∏ –±–æ–π
        const resultElement = document.querySelector("#fightcontrol .result");
        if (!resultElement) {
          console.log("[Combat] Combat not finished yet");
          return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è
        const resultText = resultElement.innerText;
        const isVictory = resultText.includes("–ø–æ–±–µ–¥–∏–ª–∏") || resultText.includes("–≤—ã–∏–≥—Ä–∞–ª–∏");
        const isDefeat = resultText.includes("–ø—Ä–æ–∏–≥—Ä–∞–ª–∏") || resultText.includes("–ø—Ä–æ–∏–≥—Ä—ã—à");
        const isDraw = resultText.includes("–Ω–∏—á—å—è") || resultText.includes("–≤–Ω–∏—á—å—é");
        
        let result = "unknown";
        if (isVictory) result = "victory";
        else if (isDefeat) result = "defeat";
        else if (isDraw) result = "draw";
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤
        const opponent1 = document.querySelector(".fighter1 .user a")?.innerText || "Unknown";
        const opponent2 = document.querySelector(".fighter2 .user a")?.innerText || "Unknown";
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–ø—ã—Ç –∏ –¥–µ–Ω—å–≥–∏
        const expGained = document.querySelector(".experience")?.innerText.match(/\d+/) || 0;
        const moneyGained = document.querySelector(".tugriki")?.innerText.replace(/,/g, "") || 0;
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –±–æ–µ
        const combatRecord = {
          date: new Date().toISOString(),
          result,
          opponent1,
          opponent2,
          expGained: parseInt(expGained, 10),
          moneyGained: parseInt(moneyGained, 10),
          url: window.location.href
        };
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        let combatStats = JSON.parse(localStorage.getItem("mw-combat-stats") || "[]");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        combatStats.push(combatRecord);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        if (combatStats.length > 100) {
          combatStats = combatStats.slice(-100);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        localStorage.setItem("mw-combat-stats", JSON.stringify(combatStats));
        
        console.log(`[Combat] Combat statistics saved: ${result}`);
      } catch (error) {
        console.error("Error saving combat stats:", error);
      }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å –±–æ–µ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
     */
    function showCombatStatsPanel() {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–∞–Ω–µ–ª—å
        if (document.getElementById("mw-combat-stats-panel")) {
          document.getElementById("mw-combat-stats-panel").style.display = "block";
          return;
        }
        
        console.log("[Combat] Showing combat statistics panel");
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const combatStats = JSON.parse(localStorage.getItem("mw-combat-stats") || "[]");
        
        if (combatStats.length === 0) {
          showNotification("‚öîÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –±–æ—è—Ö");
          return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
        const overlay = document.createElement("div");
        overlay.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: rgba(0, 0, 0, 0.7);
          z-index: 9998;
        `;
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const panel = document.createElement("div");
        panel.id = "mw-combat-stats-panel";
        panel.style.cssText = `
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          width: 700px;
          max-width: 90%;
          max-height: 80%;
          overflow-y: auto;
          background: white;
          border-radius: 10px;
          padding: 20px;
          z-index: 9999;
          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        `;
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const header = document.createElement("div");
        header.style.cssText = `
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
          padding-bottom: 10px;
          border-bottom: 1px solid #eee;
        `;
        
        header.innerHTML = `
          <h2 style="margin: 0;">–ë–æ–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
          <span id="mw-combat-stats-close" style="cursor: pointer; font-size: 24px;">&times;</span>
        `;
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalCombats = combatStats.length;
        const victories = combatStats.filter(s => s.result === "victory").length;
        const defeats = combatStats.filter(s => s.result === "defeat").length;
        const draws = combatStats.filter(s => s.result === "draw").length;
        
        const victoryRate = ((victories / totalCombats) * 100).toFixed(1);
        
        const totalExp = combatStats.reduce((sum, s) => sum + (s.expGained || 0), 0);
        const totalMoney = combatStats.reduce((sum, s) => sum + (s.moneyGained || 0), 0);
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const summary = document.createElement("div");
        summary.style.cssText = `
          display: flex;
          flex-wrap: wrap;
          gap: 20px;
          margin-bottom: 20px;
        `;
        
        summary.innerHTML = `
          <div style="background: #f5f5f5; padding: 15px; border-radius: 8px; min-width: 200px;">
            <h3 style="margin-top: 0;">–ò—Ç–æ–≥–∏</h3>
            <div>–í—Å–µ–≥–æ –±–æ—ë–≤: <strong>${totalCombats}</strong></div>
            <div>–ü–æ–±–µ–¥—ã: <strong style="color: green;">${victories}</strong></div>
            <div>–ü–æ—Ä–∞–∂–µ–Ω–∏—è: <strong style="color: red;">${defeats}</strong></div>
            <div>–ù–∏—á—å–∏: <strong style="color: gray;">${draws}</strong></div>
            <div>–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: <strong>${victoryRate}%</strong></div>
          </div>
          
          <div style="background: #f5f5f5; padding: 15px; border-radius: 8px; min-width: 200px;">
            <h3 style="margin-top: 0;">–ù–∞–≥—Ä–∞–¥—ã</h3>
            <div>–í—Å–µ–≥–æ –æ–ø—ã—Ç–∞: <strong>${totalExp.toLocaleString()}</strong></div>
            <div>–í—Å–µ–≥–æ –¥–µ–Ω–µ–≥: <strong>${totalMoney.toLocaleString()} —Ç–≥.</strong></div>
            <div>–°—Ä–µ–¥–Ω–µ–µ –∑–∞ –±–æ–π: <strong>${Math.round(totalExp / totalCombats).toLocaleString()} –æ–ø—ã—Ç–∞</strong></div>
            <div>–°—Ä–µ–¥–Ω–µ–µ –∑–∞ –±–æ–π: <strong>${Math.round(totalMoney / totalCombats).toLocaleString()} —Ç–≥.</strong></div>
          </div>
        `;
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –±–æ—è–º–∏
        const table = document.createElement("div");
        table.style.cssText = `
          max-height: 400px;
          overflow-y: auto;
          margin-top: 20px;
          border-top: 1px solid #eee;
          padding-top: 20px;
        `;
        
        table.innerHTML = `
          <h3>–ò—Å—Ç–æ—Ä–∏—è –±–æ—ë–≤</h3>
          <table style="width: 100%; border-collapse: collapse;">
            <thead>
              <tr style="background: #f5f5f5;">
                <th style="padding: 8px; text-align: left;">–î–∞—Ç–∞</th>
                <th style="padding: 8px; text-align: left;">–†–µ–∑—É–ª—å—Ç–∞—Ç</th>
                <th style="padding: 8px; text-align: left;">–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏</th>
                <th style="padding: 8px; text-align: right;">–û–ø—ã—Ç</th>
                <th style="padding: 8px; text-align: right;">–î–µ–Ω—å–≥–∏</th>
              </tr>
            </thead>
            <tbody>
              ${combatStats.reverse().map(stat => `
                <tr style="border-bottom: 1px solid #eee;">
                  <td style="padding: 8px;">${new Date(stat.date).toLocaleString()}</td>
                  <td style="padding: 8px;">
                    <span style="color: ${
                      stat.result === "victory" ? "green" : 
                      stat.result === "defeat" ? "red" : 
                      "gray"
                    };">
                      ${
                        stat.result === "victory" ? "–ü–æ–±–µ–¥–∞" : 
                        stat.result === "defeat" ? "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ" : 
                        stat.result === "draw" ? "–ù–∏—á—å—è" : 
                        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                      }
                    </span>
                  </td>
                  <td style="padding: 8px;">${stat.opponent1} vs ${stat.opponent2}</td>
                  <td style="padding: 8px; text-align: right;">${stat.expGained?.toLocaleString() || 0}</td>
                  <td style="padding: 8px; text-align: right;">${stat.moneyGained?.toLocaleString() || 0}</td>
                </tr>
              `).join("")}
            </tbody>
          </table>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞
        const exportButton = document.createElement("button");
        exportButton.className = "mw-btn";
        exportButton.textContent = "üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö";
        exportButton.style.marginTop = "20px";
        
        exportButton.addEventListener("click", () => {
          try {
            // –°–æ–∑–¥–∞–µ–º CSV —Å—Ç—Ä–æ–∫—É
            let csv = "–î–∞—Ç–∞;–†–µ–∑—É–ª—å—Ç–∞—Ç;–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ 1;–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ 2;–û–ø—ã—Ç;–î–µ–Ω—å–≥–∏\n";
            
            combatStats.forEach(stat => {
              csv += `${new Date(stat.date).toLocaleString()};`;
              csv += `${
                stat.result === "victory" ? "–ü–æ–±–µ–¥–∞" : 
                stat.result === "defeat" ? "–ü–æ—Ä–∞–∂–µ–Ω–∏–µ" : 
                stat.result === "draw" ? "–ù–∏—á—å—è" : 
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
              };`;
              csv += `${stat.opponent1};`;
              csv += `${stat.opponent2};`;
              csv += `${stat.expGained || 0};`;
              csv += `${stat.moneyGained || 0}\n`;
            });
            
            // –°–æ–∑–¥–∞–µ–º Blob –∏ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
            const url = URL.createObjectURL(blob);
            
            // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ "–∫–ª–∏–∫–∞–µ–º" –ø–æ –Ω–µ–π
            const link = document.createElement("a");
            link.setAttribute("href", url);
            link.setAttribute("download", `moswar-combat-stats-${new Date().toISOString().slice(0, 10)}.csv`);
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
          } catch (err) {
            console.error("Error exporting combat stats:", err);
            showNotification("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö");
          }
        });
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
        panel.appendChild(header);
        panel.appendChild(summary);
        panel.appendChild(table);
        panel.appendChild(exportButton);
        
        document.body.appendChild(overlay);
        document.body.appendChild(panel);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
        document.getElementById("mw-combat-stats-close").addEventListener("click", () => {
          panel.remove();
          overlay.remove();
        });
        
        overlay.addEventListener("click", () => {
          panel.remove();
          overlay.remove();
        });
        
        console.log("[Combat] Combat statistics panel shown");
      } catch (error) {
        console.error("Error showing combat stats panel:", error);
      }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–æ—è
     */
    function handleCombatPageLoad() {
      try {
        console.log("[Combat] Handling combat page load");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±–æ—è
        if (!window.location.href.includes("/fight/")) {
          return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
        renderNavbar();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –ª–æ–≥–∞–º–∏
        addCombatLogObserver();
        
        // –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ –±–æ—è
        cleanupFightLogs();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ö–æ–¥
        autoCombat();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∫–æ–Ω—á–µ–Ω –ª–∏ –±–æ–π
        const resultElement = document.querySelector("#fightcontrol .result");
        if (resultElement) {
          console.log("[Combat] Combat finished, saving stats");
          saveCombatStats();
        }
        
        console.log("[Combat] Combat page handlers initialized");
      } catch (error) {
        console.error("Error handling combat page load:", error);
      }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü
     */
    function setupPageHandlers() {
      try {
        console.log("[Init] Setting up page handlers");
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const currentUrl = window.location.href;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–æ—è
        if (currentUrl.includes("/fight/")) {
          handleCombatPageLoad();
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        else if (currentUrl.includes("/automobile/")) {
          initializeButtons();
          addTransportControls();
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥–∞—Ä–∞–∂–∞
        else if (currentUrl.includes("/home/")) {
          initializeButtons();
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        redrawMain();
        
        console.log("[Init] Page handlers set up");
      } catch (error) {
        console.error("Error setting up page handlers:", error);
      }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    function startScript() {
      try {
        console.log("[Init] Starting MosWar 6k script");
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç
        init();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
        setupPageHandlers();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        setupDynamicElementsObserver();
        
        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–≥—Ä—ã
        overrideGameFunctions();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        setupKeyboardShortcuts();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∫–Ω–æ —Å—Ç–∞—Ç—É—Å–∞
        if (loadSetting("showStatusWindow", true)) {
          setupStatusWindow();
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        setupSettingsWindow();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã
        applyThemeSettings();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        showNotification("‚úÖ MosWar 6k –∑–∞–ø—É—â–µ–Ω");
        
        console.log("[Init] MosWar 6k script started successfully");
      } catch (error) {
        console.error("Error starting script:", error);
      }
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setTimeout(startScript, 500);

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—ä–µ–∫—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.MosWar6k = {
      // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
      init,
      redrawMain,
      autoPilot,
      fillAllCars,
      patrolMode,
      metroWorkMode,
      fightMode,
      
      // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–ø–ª–µ–∫—Ç–∞–º–∏
      saveSet,
      sendSet,
      saveSetModal,
      resetSlot,
      
      // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
      checkCarFuel,
      fillCarFuel,
      
      // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–æ—è
      makeTurn,
      autoCombat,
      showCombatStatsPanel,
      
      // –§—É–Ω–∫—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
      updateStatus,
      showNotification,
      showAlert,
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
      saveSettings,
      loadSetting,
      
      // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
      player
    };
})();