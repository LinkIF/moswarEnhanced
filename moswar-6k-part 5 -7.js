// MosWar 6k - –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ú–æ—Å–∫–æ–≤—Å–∫–∏—Ö –í–æ–π–Ω
// –ß–∞—Å—Ç—å 5/7

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≥–∞—Ä–∞–∂–∞
     */
    function initializeButtons() {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if (document.querySelector(".mw-sort-buttons")) {
          return;
        }
        
        console.log("[Garage] Initializing sorting buttons");
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        const sortingContainer = document.createElement("div");
        sortingContainer.className = "mw-sort-buttons";
        sortingContainer.style.cssText = `
          display: flex;
          flex-wrap: wrap;
          gap: 5px;
          margin: 10px 0;
          padding: 10px;
          background: #f5f5f5;
          border-radius: 5px;
        `;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        const sortTypes = [
          { id: "ready", label: "üü¢ –ì–æ—Ç–æ–≤—ã", tooltip: "–ì–æ—Ç–æ–≤—ã–µ –∫ –ø–æ–µ–∑–¥–∫–µ" },
          { id: "refuel", label: "‚õΩ –ó–∞–ø—Ä–∞–≤–∏—Ç—å", tooltip: "–¢—Ä–µ–±—É—é—Ç –∑–∞–ø—Ä–∞–≤–∫–∏" },
          { id: "busy", label: "üöó –í –ø—É—Ç–∏", tooltip: "–ú–∞—à–∏–Ω—ã –≤ –ø—É—Ç–∏" },
          { id: "all", label: "üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", tooltip: "–í—Å–µ –º–∞—à–∏–Ω—ã" }
        ];
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        for (const sort of sortTypes) {
          const button = createButton(sort.label, () => sortGarageByType(sort.id), sort.tooltip);
          sortingContainer.appendChild(button);
        }
        
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç –≥–∞—Ä–∞–∂–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫
        const garageElement = document.querySelector(".cars-trip-choose, .home-garage");
        
        if (garageElement) {
          // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –≥–∞—Ä–∞–∂–æ–º
          garageElement.parentNode.insertBefore(sortingContainer, garageElement);
          
          // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ
          const refuelButton = createButton("‚õΩ –ó–∞–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ", fillAllCars, "–ó–∞–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç");
          sortingContainer.appendChild(refuelButton);
          
          console.log("[Garage] Sorting buttons added");
        } else {
          console.log("[Garage] Garage element not found");
        }
      } catch (error) {
        console.error("Error initializing buttons:", error);
      }
    }
    
    /**
     * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –≥–∞—Ä–∞–∂ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É
     * @param {string} sortType - –¢–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ("ready", "refuel", "busy", "all")
     */
    async function sortGarageByType(sortType = "all") {
      try {
        console.log(`[Garage] Sorting by type: ${sortType}`);
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        const transportElements = document.querySelectorAll(".cars-trip-choose li, .home-garage .objects > div");
        
        if (!transportElements.length) {
          console.log("[Garage] No transport elements found");
          return;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        for (const element of transportElements) {
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          element.style.display = "";
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
          if (sortType === "all") {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            continue;
          } 
          else if (sortType === "busy") {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç—ã–µ (–≤ –ø—É—Ç–∏)
            const isBusy = element.querySelector(".timeleft, .car-countdown");
            if (!isBusy) {
              element.style.display = "none";
            }
          }
          else if (sortType === "refuel") {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–±—É—é—â–∏–µ –∑–∞–ø—Ä–∞–≤–∫–∏
            const fuelElement = element.querySelector(".fuel div");
            if (!fuelElement) {
              element.style.display = "none";
              continue;
            }
            
            const fuelWidth = fuelElement.style.width;
            const fuelLevel = parseInt(fuelWidth, 10);
            
            if (isNaN(fuelLevel) || fuelLevel >= 25) {
              element.style.display = "none";
            }
          }
          else if (sortType === "ready") {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ –∫ –ø–æ–µ–∑–¥–∫–µ (–Ω–µ –≤ –ø—É—Ç–∏ –∏ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º —Ç–æ–ø–ª–∏–≤–æ–º)
            const isBusy = element.querySelector(".timeleft, .car-countdown");
            if (isBusy) {
              element.style.display = "none";
              continue;
            }
            
            const fuelElement = element.querySelector(".fuel div");
            if (!fuelElement) {
              element.style.display = "none";
              continue;
            }
            
            const fuelWidth = fuelElement.style.width;
            const fuelLevel = parseInt(fuelWidth, 10);
            
            if (isNaN(fuelLevel) || fuelLevel < 25) {
              element.style.display = "none";
            }
            
            // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ–∫–±–æ–∫—Å—ã (–µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–µ–∑–¥–æ–∫)
            const checkbox = element.querySelector("input[type='checkbox']");
            if (checkbox && checkbox.disabled) {
              element.style.display = "none";
            }
          }
        }
        
        updateStatus(`üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${sortType}`);
      } catch (error) {
        console.error(`Error sorting garage by type ${sortType}:`, error);
      }
    }
    
    /**
     * –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
     */
    function redrawMain() {
      try {
        console.log("[UI] Redrawing main screen");
        
        // –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        renderPanel();
        
        // –†–∏—Å—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –±–æ–µ–≤
        renderNavbar();
        
        // –†–∏—Å—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –¥–æ –∫–æ–Ω—Ñ–µ—Ç—ã
        renderCandyCountdown();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≥–∞—Ä–∞–∂–∞
        initializeButtons();
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        handleUI();
      } catch (error) {
        console.error("Error redrawing main:", error);
      }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    function handleUI() {
      try {
        const currentUrl = window.location.href;
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–æ—è
        if (currentUrl.includes("/fight/")) {
          console.log("[UI] Handling fight page");
          
          // –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ –±–æ—è
          cleanupFightLogs();
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ö–æ–¥ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–ø–∏–ª–æ—Ç)
          if (localStorage.getItem("mw-autopilot") === "true") {
            setTimeout(() => makeTurn(false), 1000);
          }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥–∞—Ä–∞–∂–∞ –∏–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        if (currentUrl.includes("/automobile/") || currentUrl.includes("/home/")) {
          console.log("[UI] Handling garage page");
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≥–∞—Ä–∞–∂–∞
          initializeButtons();
        }
      } catch (error) {
        console.error("Error handling UI:", error);
      }
    }
    
    /**
     * –†–∏—Å—É–µ—Ç —Ç–∞–π–º–µ—Ä—ã –∑–∞–¥–∞–Ω–∏–π
     */
    function drawTimers() {
      try {
        console.log("[UI] Drawing timers");
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const timerElements = document.querySelectorAll("[timer]");
        
        if (!timerElements.length) {
          console.log("[UI] No timers found");
          return;
        }
        
        console.log(`[UI] Found ${timerElements.length} timers`);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∞–π–º–µ—Ä
        for (const element of timerElements) {
          // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
          const timerValue = parseInt(element.getAttribute("timer"), 10);
          
          if (isNaN(timerValue)) {
            continue;
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–∞–π–º–µ—Ä–∞
          function updateTimer() {
            const hours = Math.floor(timerValue / 3600);
            const minutes = Math.floor((timerValue % 3600) / 60);
            const seconds = timerValue % 60;
            
            element.textContent = `${hours > 0 ? hours + "—á " : ""}${minutes > 0 ? minutes + "–º " : ""}${seconds}—Å`;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç —Ç–∞–π–º–µ—Ä–∞
            const currentValue = parseInt(element.getAttribute("timer"), 10);
            if (currentValue > 0) {
              element.setAttribute("timer", currentValue - 1);
              setTimeout(updateTimer, 1000);
            } else {
              element.textContent = "–ì–æ—Ç–æ–≤–æ!";
              element.style.color = "#4caf50";
            }
          }
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
          updateTimer();
        }
      } catch (error) {
        console.error("Error drawing timers:", error);
      }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∑–∞ –ª–æ–≥–∞–º–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –±–æ—è
     */
    function LEGACY_initGroupFightLogs() {
      try {
        console.log("[Fight] Initializing group fight logs");
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ª–æ–≥–æ–≤
        const logsContainer = document.getElementById("fightlogs");
        
        if (!logsContainer) {
          console.log("[Fight] Logs container not found");
          return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ª–æ–≥–æ–≤
        const observer = new MutationObserver((mutations) => {
          mutations.forEach((mutation) => {
            if (mutation.addedNodes.length > 0) {
              console.log("[Fight] New logs detected");
              
              // –û—á–∏—â–∞–µ–º –Ω–æ–≤—ã–µ –ª–æ–≥–∏
              cleanupFightLogs();
            }
          });
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å
        observer.observe(logsContainer, {
          childList: true,
          subtree: true
        });
        
        console.log("[Fight] Group fight logs observer started");
      } catch (error) {
        console.error("Error initializing group fight logs:", error);
      }
    }
    
    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ
     */
    var player = {
      name: document.querySelector(".user a")?.textContent || "Unknown",
      level: document.querySelector(".level")?.textContent.match(/\d+/)?.[0] || 0,
      faction: document.querySelector(".user .fraction[class*='fraction-']")?.className.match(/fraction-(\w+)/)?.[1] || "unknown"
    };
    
    console.log(`[Player] Name: ${player.name}, Level: ${player.level}, Faction: ${player.faction}`);
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º—É –∂—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
     * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
     * @param {string} level - –£—Ä–æ–≤–µ–Ω—å —Å–æ–æ–±—â–µ–Ω–∏—è (info, warn, error)
     */
    function logWithTimestamp(message, level = "info") {
      try {
        const timestamp = new Date().toISOString();
        const logMessage = `[${timestamp}] [LinkIF] ${message}`;
        
        switch (level) {
          case "warn":
            console.warn(logMessage);
            break;
          case "error":
            console.error(logMessage);
            break;
          default:
            console.log(logMessage);
            break;
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–æ–≥–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const logs = JSON.parse(localStorage.getItem("mw-logs") || "[]");
        logs.push({ timestamp, message, level });
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω–∏–º—ã—Ö –ª–æ–≥–æ–≤
        if (logs.length > 100) {
          logs.shift(); // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –ª–æ–≥
        }
        
        localStorage.setItem("mw-logs", JSON.stringify(logs));
      } catch (error) {
        console.error("Error logging with timestamp:", error);
      }
    }
    
    /**
     * –§–∏–ª—å—Ç—Ä –ª–æ–≥–æ–≤ –±–æ—è
     * @param {string} selector - CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ–≥–æ–≤
     */
    function filterLogsByClass(selector = ".journal") {
      try {
        console.log(`[Logs] Filtering logs by selector: ${selector}`);
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ª–æ–≥–æ–≤
        const logElements = document.querySelectorAll(selector);
        
        if (!logElements.length) {
          console.log("[Logs] No log elements found");
          return;
        }
        
        console.log(`[Logs] Found ${logElements.length} log elements`);
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏
        const controlPanel = document.createElement("div");
        controlPanel.className = "logs-control-panel";
        controlPanel.innerHTML = `
          <div class="header">–§–∏–ª—å—Ç—Ä –ª–æ–≥–æ–≤</div>
        `;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const filterTypes = [
          { id: "attack", label: "–ê—Ç–∞–∫–∏" },
          { id: "defense", label: "–ó–∞—â–∏—Ç–∞" },
          { id: "dodge", label: "–£–∫–ª–æ–Ω–µ–Ω–∏–µ" },
          { id: "critical", label: "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ" },
          { id: "damage", label: "–£—Ä–æ–Ω" },
          { id: "heal", label: "–õ–µ—á–µ–Ω–∏–µ" },
          { id: "buff", label: "–ë–∞—Ñ—Ñ—ã" },
          { id: "control", label: "–ö–æ–Ω—Ç—Ä–æ–ª—å" },
          { id: "all", label: "–í—Å–µ" }
        ];
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        for (const filter of filterTypes) {
          const button = document.createElement("div");
          button.className = "log-toggle";
          button.dataset.filter = filter.id;
          button.textContent = filter.label;
          
          if (filter.id === "all") {
            button.classList.add("active");
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
          button.addEventListener("click", () => {
            // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–í—Å–µ", –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—ë
            if (filter.id === "all") {
              document.querySelectorAll(".log-toggle").forEach(btn => {
                btn.classList.remove("active");
              });
              button.classList.add("active");
              
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ª–æ–≥–∏
              logElements.forEach(log => {
                log.style.display = "";
              });
              
              return;
            }
            
            // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ"
            document.querySelector(".log-toggle[data-filter='all']").classList.remove("active");
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏
            button.classList.toggle("active");
            
            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
            const activeFilters = [...document.querySelectorAll(".log-toggle.active")].map(el => el.dataset.filter);
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º "–í—Å–µ"
            if (activeFilters.length === 0) {
              document.querySelector(".log-toggle[data-filter='all']").classList.add("active");
              logElements.forEach(log => {
                log.style.display = "";
              });
              return;
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ –ª–æ–≥–∞–º
            logElements.forEach(log => {
              const text = log.textContent.toLowerCase();
              const show = activeFilters.some(filter => {
                switch (filter) {
                  case "attack": 
                    return text.includes("–∞—Ç–∞–∫") || text.includes("–±—å—ë—Ç");
                  case "defense":
                    return text.includes("–∑–∞—â–∏—â–∞–µ—Ç—Å—è") || text.includes("–±–ª–æ–∫–∏—Ä—É–µ—Ç");
                  case "dodge":
                    return text.includes("—É–∫–ª–æ–Ω—è–µ—Ç—Å—è") || text.includes("—É–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç—Å—è") || text.includes("–ø—Ä–æ–º–∞—Ö");
                  case "critical":
                    return text.includes("–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π") || text.includes("–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è");
                  case "damage":
                    return text.includes("—É—Ä–æ–Ω") || text.includes("–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π");
                  case "heal":
                    return text.includes("–ª–µ—á–∏—Ç") || text.includes("–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç");
                  case "buff":
                    return text.includes("—É—Å–∏–ª–∏–≤–∞–µ—Ç") || text.includes("—ç—Ñ—Ñ–µ–∫—Ç");
                  case "control":
                    return text.includes("–æ–≥–ª—É—à–∞–µ—Ç") || text.includes("–∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç") || text.includes("–∫–æ–Ω—Ç—Ä–æ–ª—å");
                  default:
                    return false;
                }
              });
              
              log.style.display = show ? "" : "none";
            });
          });
          
          controlPanel.appendChild(button);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.body.appendChild(controlPanel);
        
        console.log("[Logs] Filter control panel added");
      } catch (error) {
        console.error("Error filtering logs by class:", error);
      }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {HTMLElement} element - –≠–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å
     * @param {HTMLElement} handle - –≠–ª–µ–º–µ–Ω—Ç, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    function makeDraggable(element, handle = null) {
      try {
        if (!element) return;
        
        const dragHandle = handle || element;
        let offsetX = 0;
        let offsetY = 0;
        let isDragging = false;
        
        // –§—É–Ω–∫—Ü–∏—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        const dragStart = (e) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫–Ω—É–ª–∏ –∏–º–µ–Ω–Ω–æ –ø–æ handle
          if (e.target !== dragHandle && !dragHandle.contains(e.target)) {
            return;
          }
          
          e.preventDefault();
          
          // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–∞
          const rect = element.getBoundingClientRect();
          offsetX = e.clientX - rect.left;
          offsetY = e.clientY - rect.top;
          isDragging = true;
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
          element.style.transition = "none";
          element.style.opacity = "0.8";
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
          document.addEventListener("mousemove", drag);
          document.addEventListener("mouseup", dragEnd);
        };
        
        // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        const drag = (e) => {
          if (!isDragging) return;
          
          e.preventDefault();
          
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é, —É—á–∏—Ç—ã–≤–∞—è —Å–º–µ—â–µ–Ω–∏–µ
          const x = e.clientX - offsetX;
          const y = e.clientY - offsetY;
          
          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –æ–∫–Ω–∞
          const maxX = window.innerWidth - element.offsetWidth;
          const maxY = window.innerHeight - element.offsetHeight;
          
          const boundedX = Math.max(0, Math.min(x, maxX));
          const boundedY = Math.max(0, Math.min(y, maxY));
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
          element.style.left = `${boundedX}px`;
          element.style.top = `${boundedY}px`;
        };
        
        // –§—É–Ω–∫—Ü–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        const dragEnd = () => {
          isDragging = false;
          element.style.opacity = "1";
          element.style.transition = "";
          
          // –£–¥–∞–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
          document.removeEventListener("mousemove", drag);
          document.removeEventListener("mouseup", dragEnd);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
          localStorage.setItem(`${element.id}-position`, JSON.stringify({
            left: element.style.left,
            top: element.style.top
          }));
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏—è mousedown –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        dragHandle.addEventListener("mousedown", dragStart);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        dragHandle.style.cursor = "move";
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
        const savedPosition = JSON.parse(localStorage.getItem(`${element.id}-position`));
        if (savedPosition) {
          element.style.left = savedPosition.left;
          element.style.top = savedPosition.top;
        }
        
        // –î–µ–ª–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∞–±—Å–æ–ª—é—Ç–Ω–æ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ
        const computedStyle = window.getComputedStyle(element);
        if (computedStyle.position === "static") {
          element.style.position = "absolute";
        }
        
        console.log(`[UI] Element ${element.id} made draggable`);
      } catch (error) {
        console.error("Error making element draggable:", error);
      }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∂—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     */
    function createLogConsole() {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–Ω—Å–æ–ª—å
        if (document.getElementById("mw-log-console")) {
          return;
        }
        
        console.log("[UI] Creating log console");
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Å–æ–ª–∏
        const logConsole = document.createElement("div");
        logConsole.id = "mw-log-console";
        logConsole.style.cssText = `
          position: fixed;
          bottom: 10px;
          left: 10px;
          width: 400px;
          height: 300px;
          background: rgba(0, 0, 0, 0.8);
          color: #ccc;
          border-radius: 8px;
          padding: 10px;
          font-family: monospace;
          font-size: 12px;
          display: none;
          z-index: 9999;
          overflow: hidden;
          flex-direction: column;
        `;
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–æ–Ω—Å–æ–ª–∏
        const header = document.createElement("div");
        header.style.cssText = `
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding-bottom: 5px;
          border-bottom: 1px solid #444;
          margin-bottom: 5px;
        `;
        header.innerHTML = `
          <div>LinkIF Console</div>
          <div>
            <button id="mw-log-clear" style="background: none; border: none; color: #ccc; cursor: pointer; margin-right: 10px;">Clear</button>
            <button id="mw-log-close" style="background: none; border: none; color: #ccc; cursor: pointer;">√ó</button>
          </div>
        `;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
        const logsContainer = document.createElement("div");
        logsContainer.id = "mw-log-entries";
        logsContainer.style.cssText = `
          flex-grow: 1;
          overflow-y: auto;
          padding-right: 10px;
        `;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞
        const inputContainer = document.createElement("div");
        inputContainer.style.cssText = `
          display: flex;
          margin-top: 5px;
          border-top: 1px solid #444;
          padding-top: 5px;
        `;
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const input = document.createElement("input");
        input.type = "text";
        input.placeholder = "Enter command...";
        input.style.cssText = `
          flex-grow: 1;
          background: #222;
          color: #fff;
          border: none;
          border-radius: 4px;
          padding: 5px;
          outline: none;
        `;
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        const sendButton = document.createElement("button");
        sendButton.textContent = "‚Üµ";
        sendButton.style.cssText = `
          margin-left: 5px;
          background: #444;
          color: #fff;
          border: none;
          border-radius: 4px;
          padding: 0 10px;
          cursor: pointer;
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å
        inputContainer.appendChild(input);
        inputContainer.appendChild(sendButton);
        
        logConsole.appendChild(header);
        logConsole.appendChild(logsContainer);
        logConsole.appendChild(inputContainer);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.body.appendChild(logConsole);
        
        // –î–µ–ª–∞–µ–º –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º–æ–π
        makeDraggable(logConsole, header);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        document.getElementById("mw-log-close").addEventListener("click", () => {
          logConsole.style.display = "none";
        });
        
        document.getElementById("mw-log-clear").addEventListener("click", () => {
          document.getElementById("mw-log-entries").innerHTML = "";
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥
        function handleCommand() {
          const command = input.value.trim();
          
          if (!command) return;
          
          addLogEntry(`> ${command}`, "command");
          
          try {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            const result = processCommand(command);
            
            if (result !== undefined) {
              addLogEntry(result, "result");
            }
          } catch (err) {
            addLogEntry(`Error: ${err.message}`, "error");
          }
          
          // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
          input.value = "";
        }
        
        sendButton.addEventListener("click", handleCommand);
        input.addEventListener("keydown", (e) => {
          if (e.key === "Enter") {
            handleCommand();
          }
        });
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
        function addLogEntry(message, type = "info") {
          const entry = document.createElement("div");
          entry.className = `log-entry log-${type}`;
          entry.style.cssText = `
            margin-bottom: 3px;
            border-left: 3px solid ${type === "error" ? "#f44336" : type === "command" ? "#2196f3" : type === "result" ? "#8bc34a" : "#aaa"};
            padding-left: 5px;
            word-wrap: break-word;
          `;
          entry.innerText = message;
          
          const logsContainer = document.getElementById("mw-log-entries");
          logsContainer.appendChild(entry);
          logsContainer.scrollTop = logsContainer.scrollHeight;
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
        function processCommand(command) {
          const parts = command.split(" ");
          const cmd = parts[0].toLowerCase();
          const args = parts.slice(1);
          
          switch (cmd) {
            case "help":
              return `
                Available commands:
                - help: Show this help
                - show: Show console
                - hide: Hide console
                - clear: Clear logs
                - status: Show script status
                - player: Show player info
                - version: Show script version
              `;
              
            case "show":
              logConsole.style.display = "flex";
              return "Console shown";
              
            case "hide":
              logConsole.style.display = "none";
              return "Console hidden";
              
            case "clear":
              document.getElementById("mw-log-entries").innerHTML = "";
              return "Logs cleared";
              
            case "status":
              return `
                Script status: Running
                Current page: ${window.location.href}
                Player: ${player.name} (Level ${player.level}, ${player.faction})
                Last activity: ${new Date().toLocaleTimeString()}
              `;
              
            case "player":
              return JSON.stringify(player, null, 2);
              
            case "version":
              return "MosWar 6k v2.0";
              
            default:
              // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ –≤—ã–∑–æ–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–∏
              try {
                // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É
                const globalObj = window;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è
                if (typeof globalObj[cmd] === "function") {
                  // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
                  const result = globalObj[cmd](...args);
                  return `Function ${cmd} executed, result: ${JSON.stringify(result)}`;
                }
                
                return `Unknown command: ${cmd}. Type 'help' for available commands.`;
              } catch (err) {
                return `Error executing command: ${err.message}`;
              }
          }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Å–æ–ª–∏ (Ctrl+.)
        document.addEventListener("keydown", (e) => {
          if (e.ctrlKey && e.key === ".") {
            e.preventDefault();
            logConsole.style.display = logConsole.style.display === "none" ? "flex" : "none";
          }
        });
        
        console.log("[UI] Log console created (press Ctrl+. to show)");
      } catch (error) {
        console.error("Error creating log console:", error);
      }
    }