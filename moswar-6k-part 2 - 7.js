// MosWar 6k - –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ú–æ—Å–∫–æ–≤—Å–∫–∏—Ö –í–æ–π–Ω
// –ß–∞—Å—Ç—å 2/7

    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
     * @returns {Date} –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ
     */
    function getMoscowTime() {
      return new Date(
        new Date().toLocaleString("en-US", { timeZone: "Europe/Moscow" })
      );
    }
    
    /**
     * –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –≤ –®–∞—É—Ä–±—É—Ä–≥–µ—Ä—Å–µ
     * @param {number} t - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤ —á–∞—Å–∞—Ö (1-8)
     */
    async function workMode(t = 1) {
      try {
        async function startWork() {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –æ—à–∏–±–∫–∏ (—É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º)
          const errorMessage = await f(
            "#workForm > div.time > span.error",
            "https://www.moswar.ru/shaurburgers/"
          );
          
          if (errorMessage) {
            console.log(`[Work] Already working: ${errorMessage.innerText}`);
            return false;
          }

          // –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É
          await fetch("https://www.moswar.ru/shaurburgers/", {
            headers: {
              accept: "*/*",
              "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
              "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
              "sec-fetch-dest": "empty",
              "sec-fetch-mode": "cors",
              "sec-fetch-site": "same-origin",
              "x-requested-with": "XMLHttpRequest",
            },
            referrer: "https://www.moswar.ru/shaurburgers/",
            referrerPolicy: "strict-origin-when-cross-origin",
            body: `action=work&time=${t}&__ajax=1&return_url=%2Fshaurburgers%2F`,
            method: "POST",
            mode: "cors",
            credentials: "include",
          });
          
          console.log(`[Work] Started working for ${t} hour(s)`);
          return true;
        }
        
        await startWork(t);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ä–∞–±–æ—Ç—ã
        const intervalMinutes = t * 60 + 0.5; // –î–æ–±–∞–≤–ª—è–µ–º 0.5 –º–∏–Ω—É—Ç—ã –¥–ª—è –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
        console.log(`[Work] Will restart work in ${intervalMinutes} minutes`);
        
        setTimeout(async () => workMode(t), intervalMinutes * 60 * 1000);
      } catch (error) {
        console.error("Error in work mode:", error);
        setTimeout(async () => workMode(t), 5 * 60 * 1000); // Retry after 5 minutes on error
      }
    }
    
    /**
     * –†–µ–∂–∏–º –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {number} t - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
     */
    async function patrolMode(t = 10) {
      try {
        let form = $(await f("form#patrolForm", "https://www.moswar.ru/alley/"));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        if (
          form.find(".timeleft").text() ===
          "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –í—ã —É–∂–µ –∏—Å—Ç—Ä–∞—Ç–∏–ª–∏ –≤—Å–µ –≤—Ä–µ–º—è –ø–∞—Ç—Ä—É–ª—è."
        ) {
          // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ –ø–æ–ª—É–Ω–æ—á–∏ –ø–æ –ú–°–ö
          let msToMidnight = getMoscowTime().setHours(24, 1, 0, 0) - getMoscowTime();
          let secondsToMidnight = Math.floor(msToMidnight / 1000);
          
          console.log(`‚è∞ Patrol is over for today. Retrying in ${formatTime(secondsToMidnight)}`);
          setTimeout(async () => await patrolMode(t), msToMidnight);
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–π–º–µ—Ä –∫—É–ª–¥–∞—É–Ω–∞
        let cooldownTimer = form?.find("td.value")?.attr("timer");
        if (cooldownTimer) {
          console.log(`‚è±Ô∏è‚ùÑÔ∏è Patrol cooldown. Retry in ${formatTime(cooldownTimer)}.`);
          setTimeout(async () => await patrolMode(t), (+cooldownTimer + 3) * 1000);
          return;
        }
        
        console.log(`[üöî] Starting patrol mode (${t} minutes).`);
        await startPatrol(t);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ –ø–∞—Ç—Ä—É–ª—è
        setTimeout(() => patrolMode(t), t * 60 * 1000 + 3000);
      } catch (error) {
        console.error("Could not start patrol mode:", error);
        // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        setTimeout(() => patrolMode(t), 5 * 60 * 1000);
      }
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
     * @param {number} minutes - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
     * @param {number} region - ID —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è (1 = —Ü–µ–Ω—Ç—Ä, 2 = –æ–∫—Ä–∞–∏–Ω—ã –∏ —Ç.–¥.)
     */
    async function startPatrol(minutes = 10, region = 1) {
      try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        await fetch("https://www.moswar.ru/alley/", {
          headers: {
            accept: "*/*",
            "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "same-origin",
            "x-requested-with": "XMLHttpRequest",
          },
          referrer: "https://www.moswar.ru/alley/",
          referrerPolicy: "strict-origin-when-cross-origin",
          body: `action=patrol&region=${region}&time=${minutes}&__ajax=1&return_url=%2Falley%2F`,
          method: "POST",
          mode: "cors",
          credentials: "include",
        });
        
        // –¢–∞–∫–∂–µ –ø–æ—Å–µ—â–∞–µ–º –ø—É—Å—Ç—ã–Ω—é –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        await fetch("https://www.moswar.ru/desert/");
        await fetch("https://www.moswar.ru/desert/rob/");
        
        updateStatus(`üöî –ü–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ ${minutes} –º–∏–Ω.`);
      } catch (error) {
        console.error("Error starting patrol:", error);
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è", true);
      }
    }
    
    /**
     * –°–º–æ—Ç—Ä–µ—Ç—å –ø–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–æ–µ –¢–í (–ø–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤)
     */
    async function watchTv() {
      try {
        await fetch("https://www.moswar.ru/alley/", {
          headers: {
            accept: "*/*",
            "accept-language": "en-GB,en-US;q=0.9,en;q=0.8",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "same-origin",
            "x-requested-with": "XMLHttpRequest",
          },
          referrer: "https://www.moswar.ru/alley/",
          referrerPolicy: "strict-origin-when-cross-origin",
          body: "action=patriottv&time=1&__ajax=1&return_url=%2Falley%2F",
          method: "POST",
          mode: "cors",
          credentials: "include",
        });
        
        updateStatus("üì∫ –í—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –ø–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–æ–µ –¢–í");
      } catch (error) {
        console.error("Error watching TV:", error);
        updateStatus("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¢–í", true);
      }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–¥–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å –≥—Ä—É–ø–ø–æ–≤–æ–π –±–æ–π
     * @returns {Promise<boolean>} true –µ—Å–ª–∏ –∏–¥–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–π –±–æ–π
     */
    async function aIsGroupFight() {
      try {
        let currentUrl = AngryAjax.getCurrentUrl();
        return /^\/fight\/\d+\/?$/.test(currentUrl);
      } catch (error) {
        console.error("Error checking if group fight:", error);
        return false;
      }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–æ–π –¥–ª—è —Å–º—É—Ä—Ñ–∞ (–∞–ª—å—Ç-–∞–∫–∫–∞—É–Ω—Ç–∞)
     */
    async function handleSmurfFight() {
      try {
        await restoreHP();
        
        await attackByCriteria({
          criteria: "type",
          minLvl: +player.level + 4,
          maxLvl: +player.level + 6,
        });
        
        let cooldown = await getAlleyCooldown();
        console.log("[SMURF] Attack again in ", cooldown);
        
        setTimeout(async () => await handleSmurfFight(), 1000 * 60 * (cooldown + 3));
      } catch (error) {
        console.error("Error handling smurf fight:", error);
        setTimeout(async () => await handleSmurfFight(), 5 * 60 * 1000);
      }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ –±–æ—è
     * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
     * @param {number} delay - –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     * @param  {...any} args - –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è callback —Ñ—É–Ω–∫—Ü–∏–∏
     * @returns {boolean} true –µ—Å–ª–∏ –µ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–µ
     */
    async function checkBubble(callback, delay = 0, ...args) {
      try {
        const bubbleElement = document.querySelector(
          "#personal > a.bubble > span > span.string"
        );
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –ø—É–∑—ã—Ä—è, –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
        if (!bubbleElement) return false;
        
        const bubbleText = bubbleElement.querySelector("span.text").innerText;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞ –±–æ–∏
        if (bubbleText === "–ó–∞–¥–µ—Ä–∂–∞–Ω –∑–∞ –±–æ–∏") {
          console.log("–ó–∞–¥–µ—Ä–∂–∞–Ω –∑–∞ –±–æ–∏. –ù–∞–ª–∞–∂–∏–≤–∞—é —Å–≤—è–∑–∏...");
          await fetch("https://www.moswar.ru/police/relations/");
          AngryAjax.goToUrl("/alley/");
          return true;
        } 
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –±–æ—è
        else if (bubbleText === "–û–∂–∏–¥–∞–Ω–∏–µ –±–æ—è") {
          try {
            const timerElement = bubbleElement.querySelector("span.timeleft");
            if (!timerElement) {
              console.log("Waiting for fight. Time unknown... skipping...");
              return true;
            }
            
            const waitTime = +timerElement.getAttribute("timer");
            console.log(bubbleText, `\n–ü—Ä–æ–±—É—é –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑: `, waitTime);
            
            setTimeout(() => callback(...args), (waitTime + delay) * 1000);
            return true;
          } catch (err) {
            console.log(`Waiting for fight. Time unknown... skipping...`, err);
            return true;
          }
        }
      } catch (error) {
        console.log(`[‚úÖ] All checks passed.`);
        return false;
      }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏ –∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç –∞—Ç–∞–∫—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
     * @param {Function} attackFunction - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Ç–∞–∫–∏
     * @param {number} delay - –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –∞—Ç–∞–∫–∏
     * @returns {boolean} true –µ—Å–ª–∏ –∞—Ç–∞–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞
     */
    async function attackOrReschedule(attackFunction, delay = 0, options = {}) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ –≥—Ä—É–ø–ø–æ–≤–æ–π –±–æ–π
        if (await aIsGroupFight()) {
          console.log("üö® –ò–¥–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–π –±–æ–π, –ø—Ä–æ–±—É—é –∑–∞–Ω–æ–≤–æ");
          
          setTimeout(() => {
            AngryAjax.goToUrl("/alley/"); 
            attackFunction(options);
          }, (60 + delay) * 1000);
          
          return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∫—É–ª–¥–∞—É–Ω–∞ –≤ –∑–∞–∫–æ—É–ª–∫–∞—Ö
        const cooldown = await getAlleyCooldown();
        if (cooldown) {
          console.log(`‚è±Ô∏è –ö—É–ª–¥–∞—É–Ω –≤ –∑–∞–∫–æ—É–ª–∫–∞—Ö. –ü—Ä–æ–±—É—é —á–µ—Ä–µ–∑ ${cooldown} —Å–µ–∫.`);
          
          setTimeout(() => attackFunction(options), (cooldown + delay) * 1000);
          return true;
        }
        
        return false;  // –ê—Ç–∞–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —Å–µ–π—á–∞—Å
      } catch (error) {
        console.error("Error in attackOrReschedule:", error);
        return true; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –∫—É–ª–¥–∞—É–Ω–∞ –≤ –∑–∞–∫–æ—É–ª–∫–∞—Ö
     * @returns {Promise<number>} –ö—É–ª–¥–∞—É–Ω –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –∏–ª–∏ 0, –µ—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω–∞ –Ω–µ—Ç
     */
    async function getAlleyCooldown() {
      try {
        const page = await fetch("https://www.moswar.ru/alley/").then((r) =>
          r.text()
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫—É–ª–¥–∞—É–Ω–µ
        const cooldownMatch = page.match(/–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥—Ä–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ (\d+) —Å–µ–∫/);
        if (cooldownMatch) {
          return +cooldownMatch[1];
        }
        
        const hoursCooldownMatch = page.match(
          /–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥—Ä–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ (\d+) —á–∞—Å/
        );
        if (hoursCooldownMatch) {
          return +hoursCooldownMatch[1] * 60 * 60;
        }
        
        const minutesCooldownMatch = page.match(
          /–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥—Ä–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ (\d+) –º–∏–Ω/
        );
        if (minutesCooldownMatch) {
          return +minutesCooldownMatch[1] * 60;
        }
        
        return 0; // –ù–µ—Ç –∫—É–ª–¥–∞—É–Ω–∞
      } catch (error) {
        console.error("Error getting alley cooldown:", error);
        return 60; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 60 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    }
    
    /**
     * –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –≤ –º–µ—Ç—Ä–æ
     * @param {number} hours - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã
     */
    async function metroWorkMode(hours = 1) {
      try {
        async function startMetroWork() {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –∏–ª–∏ –Ω–µ—Ç
          const alreadyWorking = document.querySelector("#personal .metro .timer");
          if (alreadyWorking) {
            console.log("[Metro] Already working");
            return false;
          }
    
          await fetch("https://www.moswar.ru/metro/", {
            method: "POST",
            headers: {
              "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
              "X-Requested-With": "XMLHttpRequest",
            },
            body: `action=work&time=${hours}&__ajax=1&return_url=%2Fmetro%2F`,
            credentials: "include",
          });
          
          console.log(`[Metro] Started working for ${hours} hour(s)`);
          return true;
        }
    
        await startMetroWork();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —Ä–∞–±–æ—Ç—ã
        const intervalMinutes = hours * 60 + 1;
        setTimeout(async () => metroWorkMode(hours), intervalMinutes * 60 * 1000);
      } catch (error) {
        console.error("Error in metro work mode:", error);
        setTimeout(async () => metroWorkMode(hours), 5 * 60 * 1000);
      }
    }
    
    /**
     * –†–µ–∂–∏–º –ó–æ–¥–∏–∞–∫–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞)
     */
    async function zodiacMode() {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (0 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 6 = —Å—É–±–±–æ—Ç–∞)
        const dayOfWeek = new Date().getDay();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        let gameUrl = "";
        switch (dayOfWeek) {
          case 1: // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –¢–∞—Ä–æ
            gameUrl = "https://www.moswar.ru/nightclub/taro/";
            break;
          case 3: // –°—Ä–µ–¥–∞ - –õ–æ—Ö–æ—Ç—Ä–æ–Ω
            gameUrl = "https://www.moswar.ru/nightclub/roulette/";
            break;
          case 5: // –ü—è—Ç–Ω–∏—Ü–∞ - –ó–æ–¥–∏–∞–∫
            gameUrl = "https://www.moswar.ru/nightclub/zodiak/";
            break;
          default:
            console.log(`[Zodiac] No game today (day ${dayOfWeek})`);
            // –ü—Ä–æ–±—É–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
            const hoursToNextDay = 24 - new Date().getHours();
            setTimeout(zodiacMode, hoursToNextDay * 60 * 60 * 1000);
            return;
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–≥—Ä–æ–π
        const gamePageResponse = await fetch(gameUrl);
        const gamePageText = await gamePageResponse.text();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∏–≥—Ä—ã
        if (gamePageText.includes("–°—ã–≥—Ä–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ")) {
          console.log("[Zodiac] Free game available, playing...");
          
          await fetch(gameUrl, {
            method: "POST",
            headers: {
              "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
              "X-Requested-With": "XMLHttpRequest",
            },
            body: "action=play&free=1&__ajax=1",
            credentials: "include",
          });
          
          updateStatus("üéÆ –°—ã–≥—Ä–∞–Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–≥—Ä–∞ –∑–æ–¥–∏–∞–∫–∞");
        } else {
          console.log("[Zodiac] No free games available");
        }
        
        // –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ —á–∞—Å
        setTimeout(zodiacMode, 60 * 60 * 1000);
      } catch (error) {
        console.error("Error in zodiac mode:", error);
        // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        setTimeout(zodiacMode, 10 * 60 * 1000);
      }
    }
    
    /**
     * –†–µ–∂–∏–º —Ç—Ä–µ–∫–µ—Ä–∞ –∫—Ä—ã—Å—ã
     * @param {number} rat - ID –∫—Ä—ã—Å—ã
     */
    async function trackRatMode(rat = 7541456) {
      try {
        await trackAndAttackRat(rat);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
        setTimeout(() => trackRatMode(rat), 10 * 60 * 1000);
      } catch (error) {
        console.error("Error in track rat mode:", error);
        // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        setTimeout(() => trackRatMode(rat), 5 * 60 * 1000);
      }
    }
    
    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏ –∞—Ç–∞–∫—É–µ—Ç –∫—Ä—ã—Å—É
     * @param {number} rat - ID –∫—Ä—ã—Å—ã
     */
    async function trackAndAttackRat(rat = 7541456) {
      try {
        console.log(`[üê≠] –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫—Ä—ã—Å—ã #${rat}...`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫—Ä—ã—Å—ã
        const profileUrl = `https://www.moswar.ru/player/${rat}/`;
        const profileResponse = await fetch(profileUrl);
        const profileText = await profileResponse.text();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–Ω–ª–∞–π–Ω –ª–∏ –∫—Ä—ã—Å–∞
        if (profileText.includes("–æ–Ω–ª–∞–π–Ω")) {
          console.log(`[üê≠] –ö—Ä—ã—Å–∞ #${rat} –æ–Ω–ª–∞–π–Ω!`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
          await restoreHP();
          
          // –ê—Ç–∞–∫—É–µ–º –∫—Ä—ã—Å—É
          await attackPlayer(rat);
          
          updateStatus(`üê≠ –ê—Ç–∞–∫–æ–≤–∞–Ω–∞ –∫—Ä—ã—Å–∞ #${rat}`);
        } else {
          console.log(`[üê≠] –ö—Ä—ã—Å–∞ #${rat} –Ω–µ –≤ —Å–µ—Ç–∏`);
        }
      } catch (error) {
        console.error(`Error tracking rat ${rat}:`, error);
      }
    }
    
    /**
     * –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏
     * @param {string} mode - –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (sport/comfort/family/business)
     */
    async function carBringupMode(mode = "comfort") {
      try {
        await carBringup(mode);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤
        setTimeout(() => carBringupMode(mode), 6 * 60 * 60 * 1000);
      } catch (error) {
        console.error("Error in car bringup mode:", error);
        // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        setTimeout(() => carBringupMode(mode), 30 * 60 * 1000);
      }
    }
    
    /**
     * –ü—Ä–æ–∫–∞—á–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {string} mode - –¢–∏–ø –ø—Ä–æ–∫–∞—á–∫–∏ (sport/comfort/family/business)
     */
    async function carBringup(mode = "comfort") {
      try {
        console.log(`[üöó] –ü—Ä–æ–∫–∞—á–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (—Ä–µ–∂–∏–º: ${mode})...`);
        
        // –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –º–∞—à–∏–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const carsToCheck = await getCarsIds();
        
        for (const carId of carsToCheck) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—É—é –º–∞—à–∏–Ω—É
          const canUpgrade = await checkCarUpgrade(carId, mode);
          
          if (canUpgrade) {
            // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–∫–∞—á–∫—É
            await upgradeCarProperty(carId, mode);
            updateStatus(`üöó –ü—Ä–æ–∫–∞—á–∞–Ω–∞ –º–∞—à–∏–Ω–∞ ${carId} (${mode})`);
            
            // –ü—Ä–æ–∫–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –º–∞—à–∏–Ω—É –∑–∞ —Ä–∞–∑
            break;
          }
        }
      } catch (error) {
        console.error("Error in car bringup:", error);
      }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏–≥—Ä–æ–∫–∞
     * @returns {Promise<string[]>} –ú–∞—Å—Å–∏–≤ ID –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
     */
    async function getCarsIds() {
      try {
        const garage = await f("#home-garage > div > div > a", "https://www.moswar.ru/home/");
        
        if (!garage) {
          console.error("Could not find cars in garage");
          return [];
        }
        
        return garage.map(car => car.getAttribute("href").split("/").splice(-2, 1)[0]);
      } catch (error) {
        console.error("Error getting cars IDs:", error);
        return [];
      }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–∫–∞—á–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {string} carId - ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {string} property - –°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏
     * @returns {Promise<boolean>} true –µ—Å–ª–∏ –ø—Ä–æ–∫–∞—á–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞
     */
    async function checkCarUpgrade(carId, property) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—à–∏–Ω–µ
        const carInfoUrl = `https://www.moswar.ru/automobile/${carId}/`;
        const carInfoResponse = await fetch(carInfoUrl);
        const carInfoText = await carInfoResponse.text();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–∫–∞—á–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
        const propertyRegex = new RegExp(`bringup_${property}`, 'i');
        return propertyRegex.test(carInfoText);
      } catch (error) {
        console.error(`Error checking car upgrade for ${carId}:`, error);
        return false;
      }
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–∫–∞—á–∫—É —Å–≤–æ–π—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {string} carId - ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {string} property - –°–≤–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏
     * @returns {Promise<boolean>} true –µ—Å–ª–∏ –ø—Ä–æ–∫–∞—á–∫–∞ —É—Å–ø–µ—à–Ω–∞
     */
    async function upgradeCarProperty(carId, property) {
      try {
        const response = await fetch("https://www.moswar.ru/automobile/bringup/", {
          method: "POST",
          headers: {
            "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
            "X-Requested-With": "XMLHttpRequest",
          },
          body: `car=${carId}&type=${property}&__ajax=1&return_url=%2Fautomobile%2F${carId}%2F`,
          credentials: "include",
        });
        
        const result = await response.json();
        
        if (result.success) {
          console.log(`[üöó] –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∫–∞—á–∞–Ω–æ —Å–≤–æ–π—Å—Ç–≤–æ ${property} –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${carId}`);
          return true;
        } else {
          console.log(`[üöó] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ ${property} –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${carId}: ${result.error || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
          return false;
        }
      } catch (error) {
        console.error(`Error upgrading car property ${property} for ${carId}:`, error);
        return false;
      }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∑–¥–æ—Ä–æ–≤—å—è –∏ —Ç—Ä–∞–≤–º—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
     * @returns {Promise<{ health: number, maxHealth: number, injury: number }>} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–¥–æ—Ä–æ–≤—å–µ
     */
    async function checkInjury() {
      try {
        const response = await fetch("https://www.moswar.ru/player/");
        const text = await response.text();
        const doc = parseHtml(text);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
        const healthBar = doc.querySelector("#personal .bar");
        if (!healthBar) {
          throw new Error("Could not find health bar");
        }
        
        const healthText = healthBar.getAttribute("title");
        const healthMatch = healthText.match(/(\d+)\/(\d+)/);
        
        if (!healthMatch) {
          throw new Error(`Could not parse health from: ${healthText}`);
        }
        
        const health = parseInt(healthMatch[1], 10);
        const maxHealth = parseInt(healthMatch[2], 10);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–≤–º—ã
        const injuryElement = doc.querySelector("#personal .injury span");
        const injury = injuryElement ? parseInt(injuryElement.innerText.match(/\d+/)[0], 10) : 0;
        
        return { health, maxHealth, injury };
      } catch (error) {
        console.error("Error checking injury:", error);
        return { health: 0, maxHealth: 0, injury: 0 };
      }
    }
    
    /**
     * –°—ä–µ—Å—Ç—å –°–Ω–∏–∫–µ—Ä—Å –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
     */
    async function eatSnickers() {
      try {
        const snickersList = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∏–ø—ã —Å–Ω–∏–∫–µ—Ä—Å–æ–≤
        for (const snickerTypeIds of [tt.kukuruza, tt.pryaniki, tt.pasta, tt.caramels]) {
          for (const snickerId of snickerTypeIds) {
            snickersList.push(snickerId);
          }
        }
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–±–ª–µ—Ç–∫–∏
        await useDopings(tt.pillsHealth);
        await useDopings(tt.vitaminsHealth);
        
        // –ó–∞—Ç–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–Ω–∏–∫–µ—Ä—Å—ã
        await useDopings(snickersList);
        
        updateStatus("üç´ –°—ä–µ–¥–µ–Ω –°–Ω–∏–∫–µ—Ä—Å");
      } catch (error) {
        console.error("Error eating snickers:", error);
      }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
     */
    async function checkAndRestoreHealth() {
      try {
        const healthInfo = await checkInjury();
        
        // –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∏–∂–µ 70% –∏–ª–∏ –µ—Å—Ç—å —Ç—Ä–∞–≤–º–∞, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        if (healthInfo.health < healthInfo.maxHealth * 0.7 || healthInfo.injury > 0) {
          console.log(`[Health] Current: ${healthInfo.health}/${healthInfo.maxHealth}, Injury: ${healthInfo.injury}`);
          
          // –°–Ω–∞—á–∞–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
          await restoreHP();
          
          // –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å—ë –µ—â—ë –Ω–∏–∑–∫–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –°–Ω–∏–∫–µ—Ä—Å
          const updatedHealth = await checkInjury();
          if (updatedHealth.health < updatedHealth.maxHealth * 0.9) {
            await eatSnickers();
          }
        }
      } catch (error) {
        console.error("Error checking and restoring health:", error);
      }
    }
    
    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞ –ø–µ—Ä–µ–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º
     * @param {number} timestamp - –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ Unix, –¥–æ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å
     * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –ø–æ—Å–ª–µ –∫—É–ª–¥–∞—É–Ω–∞
     */
    async function waitForCooldown(timestamp, callback) {
      try {
        const now = Math.floor(Date.now() / 1000);
        const timeLeft = timestamp - now;
        
        if (timeLeft <= 0) {
          // –ö—É–ª–¥–∞—É–Ω —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
          callback();
          return;
        }
        
        console.log(`[‚è±Ô∏è] –û–∂–∏–¥–∞–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞: ${formatTime(timeLeft)}`);
        setTimeout(callback, timeLeft * 1000);
      } catch (error) {
        console.error("Error in waitForCooldown:", error);
        // –í—ã–∑—ã–≤–∞–µ–º callback —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        setTimeout(callback, 60 * 1000);
      }
    }
    
    /**
     * –†–µ–∂–∏–º —Ñ–∞—Ä–º–∞ –≥–æ–ø–Ω–∏–∫–æ–≤
     * @param {number} minLevel - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
     * @param {number} maxLevel - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
     * @param {string} type - –¢–∏–ø –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ ('npc', 'player' –∏–ª–∏ 'any')
     */
    async function farm(minLevel = 8, maxLevel = 9, type = "any") {
      try {
        if (await attackOrReschedule(farm, 0, { minLevel, maxLevel, type })) {
          return;
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø–µ—Ä–µ–¥ –±–æ–µ–º
        await checkAndRestoreHealth();
        
        // –ê—Ç–∞–∫—É–µ–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        await attackByCriteria({
          minLvl: minLevel,
          maxLvl: maxLevel,
          criteria: type,
        });
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞
        const cooldown = await getAlleyCooldown();
        const waitTime = cooldown > 0 ? cooldown + 5 : 60;
        
        console.log(`[Farm] Next attack in ${waitTime} seconds`);
        setTimeout(() => farm(minLevel, maxLevel, type), waitTime * 1000);
      } catch (error) {
        console.error("Error in farm mode:", error);
        // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        setTimeout(() => farm(minLevel, maxLevel, type), 5 * 60 * 1000);
      }
    }
    
    /**
     * –§–∞—Ä–º –≤—Ä–∞–≥–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
     * @param {Array<string>} targets - –°–ø–∏—Å–æ–∫ ID —Ü–µ–ª–µ–π
     */
    async function farmEnemies(targets = []) {
      try {
        if (await attackOrReschedule(farmEnemies, 0, { targets })) {
          return;
        }
        
        if (!targets.length) {
          console.log("[Farm] No enemies in list");
          return;
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        await checkAndRestoreHealth();
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞
        const randomIndex = Math.floor(Math.random() * targets.length);
        const targetId = targets[randomIndex];
        
        console.log(`[Farm] Attacking enemy: ${targetId}`);
        await attackPlayer(targetId);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞
        const cooldown = await getAlleyCooldown();
        const waitTime = cooldown > 0 ? cooldown + 5 : 60;
        
        setTimeout(() => farmEnemies(targets), waitTime * 1000);
      } catch (error) {
        console.error("Error in farm enemies mode:", error);
        // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        setTimeout(() => farmEnemies(targets), 5 * 60 * 1000);
      }
    }
    
    /**
     * –§–∞—Ä–º –∂–µ—Ä—Ç–≤ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
     */
    async function farmVictims() {
      try {
        if (await attackOrReschedule(farmVictims)) {
          return;
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        await checkAndRestoreHealth();
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∂–µ—Ä—Ç–≤ –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        const victims = await getVictimsList();
        
        if (!victims.length) {
          console.log("[Farm] No victims in contacts");
          setTimeout(farmVictims, 30 * 60 * 1000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
          return;
        }
        
        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∂–µ—Ä—Ç–≤ –∏ –∞—Ç–∞–∫—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é
        for (const victim of victims) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –∂–µ—Ä—Ç–≤–∞ –¥–ª—è –∞—Ç–∞–∫–∏
          const isWorthy = await checkVictimWorthy(victim.id);
          
          if (isWorthy) {
            console.log(`[Farm] Attacking victim: ${victim.name} (#${victim.id})`);
            await attackPlayer(victim.id);
            break;
          } else {
            console.log(`[Farm] Victim not worthy: ${victim.name} (#${victim.id})`);
          }
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞—Ä–º–∞
        const cooldown = await getAlleyCooldown();
        const waitTime = cooldown > 0 ? cooldown + 5 : 60;
        
        setTimeout(farmVictims, waitTime * 1000);
      } catch (error) {
        console.error("Error in farm victims mode:", error);
        // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        setTimeout(farmVictims, 5 * 60 * 1000);
      }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–µ—Ä—Ç–≤ –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
     * @returns {Promise<Array<{id: string, name: string}>>} –°–ø–∏—Å–æ–∫ –∂–µ—Ä—Ç–≤
     */
    async function getVictimsList() {
      try {
        const response = await fetch("https://www.moswar.ru/phone/contacts/victims/");
        const text = await response.text();
        const doc = parseHtml(text);
        
        const victims = [];
        const victimRows = doc.querySelectorAll("table.phones tr");
        
        for (const row of victimRows) {
          const nameElement = row.querySelector("td.name a");
          if (!nameElement) continue;
          
          const name = nameElement.innerText.trim();
          const href = nameElement.getAttribute("href");
          const idMatch = href.match(/\/player\/(\d+)/);
          
          if (idMatch && idMatch[1]) {
            victims.push({ id: idMatch[1], name });
          }
        }
        
        return victims;
      } catch (error) {
        console.error("Error getting victims list:", error);
        return [];
      }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –∂–µ—Ä—Ç–≤—É
     * @param {string} victimId - ID –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∂–µ—Ä—Ç–≤—ã
     * @returns {Promise<boolean>} true –µ—Å–ª–∏ –∂–µ—Ä—Ç–≤–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞—Ç–∞–∫–∏
     */
    async function checkVictimWorthy(victimId) {
      try {
        const response = await fetch(`https://www.moswar.ru/player/${victimId}/`);
        const text = await response.text();
        const doc = parseHtml(text);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–Ω–ª–∞–π–Ω –ª–∏ –∏–≥—Ä–æ–∫
        const isOnline = doc.querySelector(".profile-header .status.online") !== null;
        if (!isOnline) {
          // –ï—Å–ª–∏ –Ω–µ –æ–Ω–ª–∞–π–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥
          const lastSeen = doc.querySelector(".profile-header .status");
          if (lastSeen) {
            const lastSeenText = lastSeen.innerText;
            // –ï—Å–ª–∏ –±—ã–ª –≤ –∏–≥—Ä–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥, –Ω–µ –∞—Ç–∞–∫—É–µ–º
            if (lastSeenText.includes("–¥–Ω–µ–π") || lastSeenText.includes("–Ω–µ–¥–µ–ª")) {
              return false;
            }
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞ (–Ω–µ –∞—Ç–∞–∫—É–µ–º —Å–ª–∞–±—ã—Ö)
        const levelElement = doc.querySelector(".profile-header .level");
        if (levelElement) {
          const level = parseInt(levelElement.innerText.match(/\d+/)[0], 10);
          if (level < player.level * 0.7) {
            console.log(`[Victim] Too low level: ${level}`);
            return false;
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–Ω–¥—ã (–Ω–µ –∞—Ç–∞–∫—É–µ–º –≤ –±–æ–ª—å—à–æ–π –±–∞–Ω–¥–µ)
        const gangElement = doc.querySelector(".profile-header .gang");
        if (gangElement && gangElement.innerText.trim() !== "") {
          console.log(`[Victim] Has gang: ${gangElement.innerText}`);
          return false;
        }
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        return true;
      } catch (error) {
        console.error(`Error checking victim ${victimId}:`, error);
        return false;
      }
    }
    
    /**
     * –ê—Ç–∞–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
     */
    async function attackRandom() {
      try {
        if (await attackOrReschedule(attackRandom)) {
          return;
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        await checkAndRestoreHealth();
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–æ—É–ª–∫–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        const alleyResponse = await fetch("https://www.moswar.ru/alley/");
        const alleyText = await alleyResponse.text();
        const alleyDoc = parseHtml(alleyText);
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –¥–ª—è –∞—Ç–∞–∫–∏
        const opponents = alleyDoc.querySelectorAll(".opponent");
        if (!opponents.length) {
          console.log("[Attack] No opponents found");
          setTimeout(attackRandom, 60 * 1000);
          return;
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        const randomIndex = Math.floor(Math.random() * opponents.length);
        const opponent = opponents[randomIndex];
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –∞—Ç–∞–∫–∏
        const attackButton = opponent.querySelector("a.button");
        if (!attackButton) {
          console.log("[Attack] No attack button found");
          setTimeout(attackRandom, 60 * 1000);
          return;
        }
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∏–∑ —Å—Å—ã–ª–∫–∏
        const href = attackButton.getAttribute("href");
        const idMatch = href.match(/\/player\/(\d+)/);
        
        if (idMatch && idMatch[1]) {
          const opponentId = idMatch[1];
          console.log(`[Attack] Attacking random opponent: ${opponentId}`);
          await attackPlayer(opponentId);
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∞—Ç–∞–∫–∏
        const cooldown = await getAlleyCooldown();
        const waitTime = cooldown > 0 ? cooldown + 5 : 60;
        
        setTimeout(attackRandom, waitTime * 1000);
      } catch (error) {
        console.error("Error in attack random mode:", error);
        // –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        setTimeout(attackRandom, 5 * 60 * 1000);
      }
    }